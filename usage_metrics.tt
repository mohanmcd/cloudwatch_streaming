resource "aws_iam_role" "lambda_logs" {
  name               = "${var.infra_env}-${var.environments.name}-logstreaming"
  assume_role_policy = data.aws_iam_policy_document.iam_assume_role_lambda.json
}

data "aws_iam_policy_document" "iam_assume_role_lambda" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role_policy" "iam_role_policy_lambda" {
  name   = "${var.infra_env}-${var.environments.name}-logstreaming"
  role   = aws_iam_role.lambda_logs.id
  policy = data.aws_iam_policy_document.lambda_logs.json
}

data "aws_iam_policy_document" "lambda_logs" {
  statement {
    actions   = [
      "ssm:DescribeAssociation",
      "ssm:GetDeployablePatchSnapshotForInstance",
      "ssm:GetDocument",
      "ssm:DescribeDocument",
      "ssm:GetManifest",
      "ssm:GetParameters",
      "ssm:GetParameter",
      "ssm:ListAssociations",
      "ssm:ListInstanceAssociations",
      "ssm:PutInventory",
      "ssm:PutComplianceItems",
      "ssm:PutConfigurePackageResult",
      "ssm:UpdateAssociationStatus",
      "ssm:UpdateInstanceAssociationStatus",
      "ssm:UpdateInstanceInformation",
      "ssm:SendCommand",
      "ssm:GetCommandInvocation"]
    effect    = "Allow"
    resources = [
      "*"]
  }

  statement {
    actions   = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:DescribeLogStreams"]
    effect    = "Allow"
    resources = [
      "*"]
  }
}

resource "aws_cloudwatch_log_subscription_filter" "myProject" {
  name            = "${var.infra_env}-${var.environments.name}-logstreaming"
  log_group_name  = "ecs/josys-qacx-core-ext-api-api"
  filter_pattern  = ""
  destination_arn = aws_lambda_function.lambda_logs.arn
}

resource "aws_lambda_function" "lambda_logs" {
  filename     = "logToElasticSearch.zip"
  function_name = "${var.infra_env}-${var.environments.name}-logToElasticSearch"
  role          = aws_iam_role.lambda_logs.arn
  handler       = "index.handler"
  runtime       = "nodejs18.x"
#   source_code_hash = filebase64sha256(data.archive_file.logToElasticSearch.zip.base64sha256)
  timeout       = 300
  description   = "cwtos_qacx"

  environment {
    variables = {
      myProject_elasticsearch_endpoint = aws_opensearch_domain.main.endpoint
    }
  }
}

resource "aws_lambda_permission" "allow_cloudwatch" {
  statement_id   = "InvokePermissionsForCloudWatchLog"
  action         = "lambda:InvokeFunction"
  function_name  = aws_lambda_function.lambda_logs.function_name
  principal      = "logs.amazonaws.com"
  source_arn     = "arn:aws:logs:ap-northeast-1:137575128411:log-group:ecs/josys-qacx-core-ext-api-api:*"
}
